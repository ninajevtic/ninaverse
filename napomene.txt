$id = 123; // Primer int ID iz baze
$hashedId = hash('sha256', $id); // Koristi sha256 za hashiranje
echo $hashedId; // Koristite heš za prikaz
biblioteka hashids

class User {
    private int $id;
    private string $name;
    private ?string $email; // Nullable tip (dozvoljava null vrednosti)

    public function __construct(int $id, string $name, ?string $email = null) {
        $this->id = $id;
        $this->name = $name;
        $this->email = $email;
    }
}

validacija polja u tabeli kroz modele i kroz bazu

// Primer sa jQuery-jem za slanje podataka o novom korisniku
$.ajax({
    url: '/path/to/ajax.php',
    method: 'POST',
    data: {
        module: 'user',
        action: 'create',
        name: 'John Doe',
        email: 'john.doe@example.com',
        password: 'securepassword'
    },
    success: function(response) {
        if (response.status === 'success') {
            alert(response.message);
        } else {
            alert('Error: ' + response.message);
        }
    },
    error: function(jqXHR) {
        alert('AJAX request failed: ' + jqXHR.responseText);
    }
});
Autentifikacija i CSRF Zaštita: Proverite da li je korisnik prijavljen i razmotrite dodavanje CSRF zaštite.

Error Handling: Koristite try-catch blokove da hvatate izuzetke i odgovarate u formatu JSON sa odgovarajućim HTTP statusom.

Response u JSON Formatu: Postavite header kao Content-Type: application/json i sve odgovore formatirajte kao JSON za konzistentnost.

$.ajax({
    url: '/path/to/ajax.php',
    type: 'GET',
    data: {
        module: 'user',
        action: 'getUserInfo',
        user_id: 1
    },
    success: function(response) {
        console.log(response);
    }
});

$.ajax({
    url: '/path/to/ajax.php',
    type: 'POST',
    data: {
        module: 'user',
        action: 'createUser',
        name: 'John',
        email: 'john@example.com'
    },
    success: function(response) {
        console.log(response);
    }
});

$.ajax({
    url: '/path/to/ajax.php',
    type: 'PUT',
    data: JSON.stringify({
        module: 'user',
        action: 'updateUser',
        user_id: 1,
        name: 'John Doe Updated'
    }),
    contentType: 'application/json',
    success: function(response) {
        console.log(response);
    }
});

$.ajax({
    url: '/path/to/ajax.php',
    type: 'DELETE',
    data: {
        module: 'user',
        action: 'deleteUser',
        user_id: 1
    },
    success: function(response) {
        console.log(response);
    }
});

www.ninaverse.com/user/edit/1234567890/username
argumenti -user - edit -1234567890 param1/ username param2
exlopde
provera niza- validan ->error malaslova-_brojevi

Control
Component (Plugin, Module)
Theme
templates

use App\Services\ChatService;
use App\Services\MessageService;

// Kreiranje servisa
$chatService = new ChatService();
$messageService = new MessageService();

// Kreiranje novog chata
$newChatId = $chatService->store(['name' => 'Team Meeting']);

// Dodavanje poruke u chat
$newMessageId = $messageService->store([
    'chat_id' => $newChatId,
    'sender_id' => 1,
    'content' => 'Hello, team!'
]);

// Dohvatanje svih poruka iz chata
$messages = $messageService->getMessagesByChat($newChatId);

// Ispis poruka
foreach ($messages as $message) {
    echo $message['content'] . "\n";
}

// Dohvatanje svih chatova
$chats = $chatService->index();
foreach ($chats as $chat) {
    echo $chat['name'] . "\n";
}

